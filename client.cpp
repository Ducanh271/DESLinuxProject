#include <iostream>
#include <fstream>
#include <vector>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <unistd.h>
#include "encryption.h"
#include "utils.h"
#define SERVER_IP "127.0.0.1"
#define PORT 8080
#define BUFFER_SIZE 1024

void sendFile(int sock, const std::string& filename) {
    std::ifstream file(filename, std::ios::binary);
    if (!file) {
        std::cerr << "‚ùå Kh√¥ng th·ªÉ m·ªü file ƒë·ªÉ g·ª≠i!\n";
        return;
    }

    // üîπ Ki·ªÉm tra k√≠ch th∆∞·ªõc file
    file.seekg(0, std::ios::end);
    int fileSize = file.tellg();
    file.seekg(0, std::ios::beg);
    std::cout << "üìå K√≠ch th∆∞·ªõc file m√£ h√≥a: " << fileSize << " bytes\n";

    char buffer[BUFFER_SIZE];
    int totalBytesSent = 0;

    while (!file.eof()) {
        file.read(buffer, BUFFER_SIZE);
        int bytesRead = file.gcount();
        send(sock, buffer, bytesRead, 0);
        totalBytesSent += bytesRead;
    }

    file.close();
    std::cout << "‚úÖ ƒê√£ g·ª≠i file m√£ h√≥a! T·ªïng s·ªë byte ƒë√£ g·ª≠i: " << totalBytesSent << " bytes\n";

    // üîπ ƒê√≥ng socket ngay sau khi g·ª≠i xong
    shutdown(sock, SHUT_WR);
}

int main() {
    int sock = 0;
    struct sockaddr_in server_addr;

    // 1. T·∫°o socket
    sock = socket(AF_INET, SOCK_STREAM, 0);
    if (sock < 0) {
        std::cerr << "‚ùå T·∫°o socket th·∫•t b·∫°i!\n";
        return 1;
    }

    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(PORT);

    // 2. Chuy·ªÉn ƒë·ªïi ƒë·ªãa ch·ªâ IP
    if (inet_pton(AF_INET, SERVER_IP, &server_addr.sin_addr) <= 0) {
        std::cerr << "‚ùå ƒê·ªãa ch·ªâ IP kh√¥ng h·ª£p l·ªá!\n";
        return 1;
    }

    // 3. K·∫øt n·ªëi ƒë·∫øn server
    if (connect(sock, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {
        std::cerr << "‚ùå K·∫øt n·ªëi th·∫•t b·∫°i!\n";
        return 1;
    }

    std::cout << "‚úÖ ƒê√£ k·∫øt n·ªëi ƒë·∫øn server!\n";

    // üîπ M√£ h√≥a file tr∆∞·ªõc khi g·ª≠i
    std::string inputFile = "hinh-anime-2.jpg";
    std::string encryptedFile = "encrypted.txt";
    std::vector<uint8_t> key = {0x13, 0x34, 0x57, 0x79, 0x9B, 0xBC, 0xDF, 0xF1};
    std:: vector<uint8_t> binKey = convertByteToBit(key);

    encryptFile(inputFile, encryptedFile, binKey);

    // G·ª≠i file m√£ h√≥a ƒë·∫øn server
    sendFile(sock, encryptedFile);

    // 4. ƒê√≥ng k·∫øt n·ªëi
    close(sock);

    return 0;
}


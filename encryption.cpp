#include "encryption.h"
#include "feistel.h"
#include "key_schedule.h"
#include "file_io.h"
#include "utils.h"
#include "thread_utils.h"  // Th√™m header m·ªõi
#include <iostream>
#include <thread>          // Th√™m th∆∞ vi·ªán thread
#include <chrono>          // ƒê·ªÉ ƒëo th·ªùi gian x·ª≠ l√Ω

void encryptFile(const std::string& inputFilename, const std::string& outputFilename, const std::vector<uint8_t>& key) {
    auto startTime = std::chrono::high_resolution_clock::now();
    
    // Chu·∫©n h√≥a kh√≥a DES
    std::vector<uint8_t> desKey = normalizeDESKey(key);
    
    // ƒê·ªçc file
    std::vector<uint8_t> plaintext = readFile(inputFilename);
    if (plaintext.empty()) {
        std::cerr << "‚ùå L·ªói: Kh√¥ng c√≥ d·ªØ li·ªáu trong file!" << std::endl;
        return;
    }

    // Th√™m padding (PKCS7)
    plaintext = addPadding(plaintext);
    
    // Chuy·ªÉn ƒë·ªïi kh√≥a t·ª´ d·∫°ng byte sang bit
    std::vector<uint8_t> bitKey = convertByteToBit(desKey);
    
    // Sinh c√°c kh√≥a con
    std::vector<std::vector<uint8_t>> subkeys = generateSubkeys(bitKey);

    // X√°c ƒë·ªãnh s·ªë l∆∞·ª£ng kh·ªëi v√† s·ªë l∆∞·ª£ng lu·ªìng
    size_t numBlocks = plaintext.size() / 8;
    size_t numThreads = std::thread::hardware_concurrency();
    numThreads = std::min(numThreads, numBlocks); // Kh√¥ng t·∫°o qu√° nhi·ªÅu lu·ªìng
    numThreads = std::max(numThreads, (size_t)1); // ƒê·∫£m b·∫£o √≠t nh·∫•t 1 lu·ªìng
    
    std::cout << "üßµ S·ª≠ d·ª•ng " << numThreads << " lu·ªìng ƒë·ªÉ m√£ h√≥a " << numBlocks << " kh·ªëi" << std::endl;

    // Chu·∫©n b·ªã vector k·∫øt qu·∫£
    std::vector<std::vector<uint8_t>> results(numBlocks);
    size_t completedBlocks = 0;
    
    // Kh·ªüi t·∫°o c√°c lu·ªìng c√¥ng vi·ªác
    std::vector<std::thread> threads;
    
    // ƒê·∫£m b·∫£o h√†ng ƒë·ª£i tr·ªëng
    {
        std::lock_guard<std::mutex> lock(queueMutex);
        while (!taskQueue.empty()) {
            taskQueue.pop();
        }
        done = false;  // Reset bi·∫øn done
    }
    
    // Kh·ªüi t·∫°o c√°c lu·ªìng x·ª≠ l√Ω
    for (size_t i = 0; i < numThreads; ++i) {
        threads.emplace_back(workerThread, std::ref(subkeys), std::ref(results), 
                            std::ref(completedBlocks), false);  // false cho m√£ h√≥a
    }
    
    // ƒê·∫©y c√°c kh·ªëi d·ªØ li·ªáu v√†o h√†ng ƒë·ª£i
    for (size_t i = 0; i < numBlocks; ++i) {
        std::vector<uint8_t> block(plaintext.begin() + i * 8, plaintext.begin() + (i + 1) * 8);
        
        {
            std::lock_guard<std::mutex> lock(queueMutex);
            taskQueue.push({i, block});
        }
        
        queueCV.notify_one();
    }
    
    // Ch·ªù t·∫•t c·∫£ kh·ªëi ƒë∆∞·ª£c x·ª≠ l√Ω
    while (true) {
        std::this_thread::sleep_for(std::chrono::milliseconds(100));
        
        std::lock_guard<std::mutex> lock(resultMutex);
        if (completedBlocks == numBlocks) break;
        
        // In ti·∫øn ƒë·ªô m·ªói 10%
        if (numBlocks > 10 && completedBlocks % (numBlocks / 10) == 0) {
            std::cout << "‚è≥ Ti·∫øn ƒë·ªô m√£ h√≥a: " << (completedBlocks * 100 / numBlocks) << "%" << std::endl;
        }
    }
    
    // Th√¥ng b√°o c√°c lu·ªìng d·ª´ng l·∫°i
    {
        std::lock_guard<std::mutex> lock(queueMutex);
        done = true;
    }
    queueCV.notify_all();
    
    // Ch·ªù c√°c lu·ªìng k·∫øt th√∫c
    for (auto& t : threads) {
        t.join();
    }
    
    // K·∫øt h·ª£p k·∫øt qu·∫£
    std::vector<uint8_t> ciphertext;
    for (const auto& block : results) {
        ciphertext.insert(ciphertext.end(), block.begin(), block.end());
    }

    // Ghi file m√£ h√≥a
    writeFile(outputFilename, ciphertext);
    
    auto endTime = std::chrono::high_resolution_clock::now();
    auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(endTime - startTime).count();
    
    std::cout << "‚úÖ ƒê√£ m√£ h√≥a file th√†nh c√¥ng: " << outputFilename << std::endl;
    std::cout << "‚è±Ô∏è Th·ªùi gian m√£ h√≥a: " << duration << " ms" << std::endl;
}
